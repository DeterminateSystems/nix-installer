name: CI

on:
  workflow_dispatch:
  pull_request:
  push:

permissions:
  contents: "read"

jobs:
  build:
    name: Build (${{ matrix.system }})

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-24.04
            system: x86_64-linux
          # TODO: need runner; GH's supposedly coming late this year
          # - os: ubuntu-24.04-arm
          #   system: aarch64-linux
          - os: macos-15-intel
            system: x86_64-darwin
          - os: macos-15
            system: aarch64-darwin

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: ./.github/actions/install-nix-action

      - name: Build the installer
        run: |
          if [[ $RUNNER_OS == "Linux" ]]; then
            ATTR="nix-installer-static"
          elif [[ $RUNNER_OS == "macOS" ]]; then
            ATTR="nix-installer"
          else
            echo "error: '$RUNNER_OS' is an unsupported operating system"
          fi
          nix build ".#$ATTR" -L
          cp result/bin/nix-installer .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: nix-installer-${{ matrix.system }}
          path: nix-installer

  lints:
    name: Lints

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check Nixpkgs input
        uses: DeterminateSystems/flake-checker-action@main
        with:
          fail-mode: true
          check-outdated: false # PRs shouldn't fail because main's nixpkgs is out of date

      - name: Install Nix
        uses: ./.github/actions/install-nix-action

      - name: Check rustfmt
        run: nix develop --command check-rustfmt
      - name: Check Clippy
        run: nix develop --command check-clippy
      - name: Check Spelling
        run: nix develop --command check-spelling
      - name: Check nixpkgs-fmt formatting
        run: nix develop --command check-nixpkgs-fmt
      - name: Check EditorConfig conformance
        run: nix develop --command check-editorconfig
      - name: Shell check for nix-installer.sh
        run: nix develop --command shellcheck ./nix-installer.sh

  run:
    name: Run (${{ matrix.system }}${{ matrix.no-init && ', no init' || '' }})

    needs: [ build ]

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-24.04
            system: x86_64-linux
          - os: ubuntu-24.04
            system: x86_64-linux
            no-init: true
          # TODO: need runner; GH's supposedly coming late this year
          # - os: ubuntu-24.04-arm
          #   system: aarch64-linux
          - os: macos-15-intel
            system: x86_64-darwin
          - os: macos-15
            system: aarch64-darwin

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v5
        with:
          name: nix-installer-${{ matrix.system }}

      - name: Move & set executable
        run: |
          mkdir install-root
          cp nix-installer.sh install-root/nix-installer.sh
          mv ./nix-installer install-root/nix-installer-${{ matrix.system }}
          chmod +x install-root/nix-installer-${{ matrix.system }} install-root/nix-installer.sh

      - name: Install dependencies
        run: |
          if [[ $RUNNER_OS == "Linux" ]]; then
            sudo apt install fish zsh
          elif [[ $RUNNER_OS = "macOS" ]]; then
            brew install coreutils fish
          else
            echo "Unsupported runner operating system: $RUNNER_OS"
            exit 1
          fi

      - name: Initial install
        uses: ./.github/actions/install-nix-action
        with:
          dogfood: true
          dogfood-path: install-root/
          use-cache: false
          no-init: ${{ matrix.no-init }}

      - name: "Validate dnixd is uninstalled"
        run: |
          if test -x /usr/local/bin/determinate-nixd; then
            echo "determinate-nixd is present"
            exit 1
          fi

      - name: Ensure daemon was not configured with init
        if: ${{ matrix.no-init != '' }}
        run: |
          if systemctl is-active nix-daemon.socket; then
            echo "nix-daemon.socket was running"
            exit 1
          fi
          if systemctl is-active nix-daemon.service; then
            echo "nix-daemon.service was running"
            exit 1
          fi

      - name: Initial uninstall (without a `nix run` first)
        run: sudo -E /nix/nix-installer uninstall
        env:
          NIX_INSTALLER_NO_CONFIRM: true
          NIX_INSTALLER_LOGGER: pretty
          NIX_INSTALLER_LOG_DIRECTIVES: nix_installer=debug
          RUST_BACKTRACE: full

      - name: Ensure `nix` is removed
        if: ${{ runner.os == 'Linux' }}
        run: |
          if systemctl is-active nix-daemon.socket; then
            echo "nix-daemon.socket was still running"
            exit 1
          fi
          if systemctl is-active nix-daemon.service; then
            echo "nix-daemon.service was still running"
            exit 1
          fi
          if [ -e /nix ]; then
            echo "/nix exists"
            exit 1
          fi

      - name: Repeated install
        uses: ./.github/actions/install-nix-action
        with:
          dogfood: true
          dogfood-path: install-root/
          use-cache: false
          no-init: ${{ matrix.no-init }}

      - name: echo $PATH
        run: echo "$PATH"

        # FIXME: Better handle running these commands in the `no-init` test case
      - name: Test `nix` with `$GITHUB_PATH`
        if: ${{ always() }}
        run: |
          ${{ matrix.no-init && 'sudo -i ' || '' }}nix-shell -p hello --command hello
          ${{ matrix.no-init && 'sudo -i ' || '' }}nix-env --install hello
          hello
          ${{ matrix.no-init && 'sudo -i ' || '' }}nix-store --gc
          ${{ matrix.no-init && 'sudo -i ' || '' }}nix-shell -p hello --command hello
      - name: Test bash
        run: ${{ matrix.no-init && 'sudo -i ' || '' }}nix-instantiate -E 'builtins.currentTime' --eval
        if: ${{ always() }}
        shell: bash --login {0}
      - name: Test sh
        run: ${{ matrix.no-init && 'sudo -i ' || '' }}nix-instantiate -E 'builtins.currentTime' --eval
        if: ${{ always() }}
        shell: sh -l {0}
      - name: Test zsh
        run: ${{ matrix.no-init && 'sudo -i ' || '' }}nix-instantiate -E 'builtins.currentTime' --eval
        if: ${{ always() }}
        shell: zsh --login --interactive {0}
      - name: Test fish
        run: ${{ matrix.no-init && 'sudo -i ' || '' }}nix-instantiate -E 'builtins.currentTime' --eval
        if: ${{ always() }}
        shell: fish --login {0}

      - name: Repeated uninstall
        run: sudo -E /nix/nix-installer uninstall
        env:
          NIX_INSTALLER_NO_CONFIRM: true
          NIX_INSTALLER_LOGGER: pretty
          NIX_INSTALLER_LOG_DIRECTIVES: nix_installer=debug
          RUST_BACKTRACE: full

      - name: Ensure `nix` is removed
        if: ${{ runner.os == 'Linux' }}
        run: |
          if systemctl is-active nix-daemon.socket; then
            echo "nix-daemon.socket was still running"
            exit 1
          fi
          if systemctl is-active nix-daemon.service; then
            echo "nix-daemon.service was still running"
            exit 1
          fi
          if [ -e /nix ]; then
            echo "/nix exists"
            exit 1
          fi

  release-checks:
    name: Run release checks
    if: ${{ contains(github.ref, 'release-') || contains(github.head_ref, 'release-') }}

    needs: [build, lints]

    runs-on: ubuntu-24.04

    env:
      SYSTEM: x86_64-linux

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore Github cache artifacts
        uses: actions/download-artifact@v5
        with:
          name: nix-installer-${{ env.SYSTEM }}

      - name: Move & set executable
        run: |
          mkdir install-root
          cp nix-installer.sh install-root/nix-installer.sh
          mv ./nix-installer "install-root/nix-installer-$SYSTEM"
          chmod +x "install-root/nix-installer-$SYSTEM" install-root/nix-installer.sh

      - name: Initial install
        uses: ./.github/actions/install-nix-action
        with:
          dogfood: true
          dogfood-path: install-root/

      - run: nix flake check -L
      - run: |
          nix build \
            -L --tarball-ttl 0 --keep-going \
            .#hydraJobs.container-test.all.x86_64-linux.all \
            .#hydraJobs.vm-test.all.x86_64-linux.all
